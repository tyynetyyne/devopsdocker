{"version":3,"sources":["component/NotesList.js","component/NotesForm.js","App.js","reportWebVitals.js","index.js"],"names":["NotesList","notes","deleteNote","changeNote","map","note","className","important","onClick","id","content","e","NotesForm","submitHandler","useState","newNote","setNewNote","newImportant","setImportant","console","log","onSubmit","onChange","target","value","type","checked","serviceURI","App","setNotes","useEffect","axios","get","then","response","data","stopPropagation","delete","filter","tempNote","find","put","tempNotes","preventDefault","date","Date","toISOString","post","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76677970.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NotesList = ({ notes, deleteNote, changeNote }) => {\r\n\r\n    // filteröinti tilamuutujan perusteella\r\n    // let filteredNotes  \r\n\r\n    return (\r\n        <div >\r\n            <h1>Muistiinpanot:</h1>\r\n            <ul>\r\n                {notes.map(note =>\r\n                    <li key={note.id}\r\n                        className={note.important ? \"important\" : \"regular\"}\r\n                        onClick={() => changeNote(note.id)}>\r\n                        {note.content}\r\n                        <button onClick={e => deleteNote(e, note.id)}>Poista</button>\r\n                    </li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesList;","import React, { useState } from 'react';\r\n\r\nconst NotesForm = ({ submitHandler }) => {\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [newImportant, setImportant] = useState(false);\r\n\r\n    console.log(newNote);\r\n    return (\r\n        <form onSubmit={e=>submitHandler(e, newNote, newImportant)}>\r\n            <input onChange={e=>setNewNote(e.target.value)} type=\"text\" value={newNote}/>\r\n            Tärkeys: <input onChange={e=>setImportant(!newImportant)}\r\n                            type=\"checkbox\" \r\n                            checked={newImportant}/><br />\r\n            <input type=\"submit\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NotesForm;","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport NotesList from './component/NotesList';\r\nimport NotesForm from './component/NotesForm';\r\n\r\nconst serviceURI = '/notes';\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  // haetaan jsonserveriltä notes:it\r\n  const initNotes = () => {\r\n    axios.get(serviceURI)\r\n      .then(response => {\r\n        console.log(response.data)\r\n        setNotes(response.data)\r\n      })\r\n  }\r\n\r\n  // ajetaan kerran käynnistyessä: \r\n  useEffect(initNotes, []);\r\n\r\n  const deleteNote = (e, id) => {\r\n    e.stopPropagation()\r\n    console.log(id)\r\n    // axios\r\n    axios.delete(`${serviceURI}/${id}`)\r\n      .then(response => {\r\n        console.log(response)\r\n        setNotes(notes.filter(note => note.id !== id))\r\n      })\r\n  }\r\n\r\n  const changeNote = (id) => {\r\n    console.log(id)\r\n    let tempNote = notes.find(note => note.id === id)\r\n    let data = {...tempNote, important: !tempNote.important}\r\n    axios.put(`${serviceURI}/${id}`, data)\r\n    .then(response => {\r\n      console.log(response.data)\r\n      const tempNotes = notes.map(note => {\r\n        if(note.id === id){\r\n          note = data\r\n        }\r\n        return note\r\n      })\r\n      setNotes(tempNotes)\r\n    })\r\n  }\r\n\r\n  const addNote = (e, note, important) => {\r\n    e.preventDefault()\r\n    const dateStamp = new Date();\r\n    const newNote = {\r\n      important: important,\r\n      content: note,\r\n      date: dateStamp.toISOString()\r\n    }\r\n    axios.post(serviceURI, newNote)\r\n      .then(response => {\r\n        console.log(\"POST:\")\r\n        console.log(response.data)\r\n        setNotes(notes.concat(response.data))\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Notesdemo</h1>\r\n      </header>\r\n      <section className=\"mysection\">     \r\n      <NotesList notes={notes}\r\n        deleteNote={deleteNote}\r\n        changeNote={changeNote} />\r\n      <NotesForm submitHandler={addNote} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}